// Generated by https://quicktype.io

namespace ml.generator.kaggle.datasetinfo
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DatasetInfo
    {
        [JsonProperty("ref")]
        public string Ref { get; set; }

        [JsonProperty("tags")]
        public Tag[] Tags { get; set; }

        [JsonProperty("creatorName")]
        public string CreatorName { get; set; }

        [JsonProperty("creatorUrl")]
        public object CreatorUrl { get; set; }

        [JsonProperty("totalBytes")]
        public long TotalBytes { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("lastUpdated")]
        public System.DateTimeOffset LastUpdated { get; set; }

        [JsonProperty("downloadCount")]
        public long DownloadCount { get; set; }

        [JsonProperty("isPrivate")]
        public bool IsPrivate { get; set; }

        [JsonProperty("isReviewed")]
        public bool IsReviewed { get; set; }

        [JsonProperty("isFeatured")]
        public bool IsFeatured { get; set; }

        [JsonProperty("licenseName")]
        public string LicenseName { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("ownerName")]
        public string OwnerName { get; set; }

        [JsonProperty("ownerRef")]
        public string OwnerRef { get; set; }

        [JsonProperty("kernelCount")]
        public long KernelCount { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("topicCount")]
        public long TopicCount { get; set; }

        [JsonProperty("viewCount")]
        public long ViewCount { get; set; }

        [JsonProperty("voteCount")]
        public long VoteCount { get; set; }

        [JsonProperty("currentVersionNumber")]
        public long CurrentVersionNumber { get; set; }

        [JsonProperty("files")]
        public File[] Files { get; set; }

        [JsonProperty("versions")]
        public Version[] Versions { get; set; }
    }

    public partial class File
    {
        [JsonProperty("ref")]
        public string Ref { get; set; }

        [JsonProperty("creationDate")]
        public System.DateTimeOffset CreationDate { get; set; }

        [JsonProperty("datasetRef")]
        public string DatasetRef { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("fileType")]
        public string FileType { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("ownerRef")]
        public string OwnerRef { get; set; }

        [JsonProperty("totalBytes")]
        public long TotalBytes { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("columns")]
        public Column[] Columns { get; set; }
    }

    public partial class Column
    {
        [JsonProperty("order")]
        public long Order { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public ColumnType Type { get; set; }

        [JsonProperty("originalType")]
        public OriginalType OriginalType { get; set; }

        [JsonProperty("description")]
        public object Description { get; set; }
    }

    public partial class Tag
    {
        [JsonProperty("ref")]
        public string Ref { get; set; }

        [JsonProperty("competitionCount")]
        public long CompetitionCount { get; set; }

        [JsonProperty("datasetCount")]
        public long DatasetCount { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("fullPath")]
        public string FullPath { get; set; }

        [JsonProperty("isAutomatic")]
        public bool IsAutomatic { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("scriptCount")]
        public long ScriptCount { get; set; }

        [JsonProperty("totalCount")]
        public long TotalCount { get; set; }
    }

    public partial class Version
    {
        [JsonProperty("versionNumber")]
        public long VersionNumber { get; set; }

        [JsonProperty("creationDate")]
        public System.DateTimeOffset CreationDate { get; set; }

        [JsonProperty("creatorName")]
        public string CreatorName { get; set; }

        [JsonProperty("creatorRef")]
        public string CreatorRef { get; set; }

        [JsonProperty("versionNotes")]
        public string VersionNotes { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }
    }

    public enum OriginalType { Empty };

    public enum ColumnType { Numeric, String, Boolean, DateTime };

    public partial class DatasetInfo
    {
        public static DatasetInfo FromJson(string json) => JsonConvert.DeserializeObject<DatasetInfo>(json, Converter.Settings);
    }

    static class OriginalTypeExtensions
    {
        public static OriginalType? ValueForString(string str)
        {
            switch (str)
            {
                case "": return OriginalType.Empty;
                default: return null;
            }
        }

        public static OriginalType ReadJson(JsonReader reader, JsonSerializer serializer)
        {
            var str = serializer.Deserialize<string>(reader);
            var maybeValue = ValueForString(str);
            if (maybeValue.HasValue) return maybeValue.Value;
            throw new Exception("Unknown enum case " + str);
        }

        public static void WriteJson(this OriginalType value, JsonWriter writer, JsonSerializer serializer)
        {
            switch (value)
            {
                case OriginalType.Empty: serializer.Serialize(writer, ""); break;
            }
        }
    }

    static class ColumnTypeExtensions
    {
        public static ColumnType? ValueForString(string str)
        {
            switch (str)
            {
                case "Numeric": return ColumnType.Numeric;
                case "String": return ColumnType.String;
                case "Boolean": return ColumnType.Boolean;
                case "DateTime": return ColumnType.DateTime;


                default: return null;
            }
        }

        public static ColumnType ReadJson(JsonReader reader, JsonSerializer serializer)
        {
            var str = serializer.Deserialize<string>(reader);
            var maybeValue = ValueForString(str);
            if (maybeValue.HasValue) return maybeValue.Value;
            throw new Exception("Unknown enum case " + str);
        }

        public static void WriteJson(this ColumnType value, JsonWriter writer, JsonSerializer serializer)
        {
            switch (value)
            {
                case ColumnType.Numeric: serializer.Serialize(writer, "Numeric"); break;
                case ColumnType.String: serializer.Serialize(writer, "String"); break;
            }
        }
    }

    public static class Serialize
    {
        public static string ToJson(this DatasetInfo self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal class Converter: JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OriginalType) || t == typeof(ColumnType) || t == typeof(OriginalType?) || t == typeof(ColumnType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (t == typeof(OriginalType))
                return OriginalTypeExtensions.ReadJson(reader, serializer);
            if (t == typeof(ColumnType))
                return ColumnTypeExtensions.ReadJson(reader, serializer);
            if (t == typeof(OriginalType?))
            {
                if (reader.TokenType == JsonToken.Null) return null;
                return OriginalTypeExtensions.ReadJson(reader, serializer);
            }
            if (t == typeof(ColumnType?))
            {
                if (reader.TokenType == JsonToken.Null) return null;
                return ColumnTypeExtensions.ReadJson(reader, serializer);
            }
            throw new Exception("Unknown type");
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var t = value.GetType();
            if (t == typeof(OriginalType))
            {
                ((OriginalType)value).WriteJson(writer, serializer);
                return;
            }
            if (t == typeof(ColumnType))
            {
                ((ColumnType)value).WriteJson(writer, serializer);
                return;
            }
            throw new Exception("Unknown type");
        }

        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = { 
                new Converter(),
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
